14. Adding Authentication

¿Que hay en el modulo?
Que es exactamente la autenticacion
Guardar y usar credenciales
Proteger rutas

Useful resources:
Bcrypt Official Docs: https://github.com/dcodeIO/bcrypt.js
More on CSRF Attacks: https://www.acunetix.com/websitesecurity/csrf-attacks/


1. ¿Que es la autenticacion?
En nuestra aplicacion podemos tener diferentes rutas, acciones que un usuario puede realizar. La idea detrás de autenticaciones es que no todas estas acciones esten disponibles para todos los usuarios de nuestra aplicacion. Por usuario, se entiende a un cliente que visita nuestra aplicacion, no hace falta que este logeado.

2. ¿Como se implementa la autenticacion?
Se crea un usuario en la base de datos, una vez creado se logea en la pagina y si los datos ingresados coinciden con la de la base de datos generamos una session para ese cliente. La sesion es necesaria porque sin ella en la siguiente peticion perderiamos la credencial ya que esta informacion, como vimos anteriormente, no se comparte a traves de peticiones salvo que la guardemos en una variable de una peticion pero esto generaria que todas las peticiones entrantes vean informacion de este usuario. La relacion cookie-session nos ahorraba este inconveniente.
Una vez logeado y creada la sesion se devuelve una respuesta con codigo HTTP 200 y se guarda la cookie hasheada con el ID para matchear la session. Podemos guardar atributos en esa sesion y con esto permitir hacer peticiones de la rutas restringidas a los cliente no registrados. Por ejemplo tener la variable isLoggedIn en la sesion y luego pasarla a una vista para generar o no ciertas caracteristicas de la pagina.
Otra manera de autenticar es generar Middlewares en las rutas y chequear si existe ese atributo/sesion y redireccionar o generar cierta vista personalizada al usuario informando que no puede acceder a cierta ruta por falta de credenciales.
Este tipo de autenticacion es implementada en cualquier aplicacion que renderice vistas. REST API's y GraphQL toman otra iniciativa.

3. Implementar un flow de autenticacion
En este curso vamos a implementar un formulario donde se va a cargar informacion de un usuario (email, contraseña). Una vez hecho esto se va a verificar que todo este correcto y valido y vamos a generar ese usuario y guardarlo en la base de datos.
Para el login simplemente vamos a chequear que exista ese email, y si existe que la contraseña sea la misma. Una vez logeado vamos a generar la sesion y la cookie con la cual vamos a poder seguir trabajando en las peticiones.

4. Encriptacion de contraseñas
No existe ninguna seguridad en guardar las contraseñas en texto plano, ya que si nuestra base de datos es comprometida, un empleado roba informacion, etc. no queremos que las contraseñas se filtren. Para evitar esto tenemos que encriptar las contraseñas de manera que no es reversible y no se puede reconstruir.

Para encriptar vamos a trabajar con un paquete llamado "bcryptjs".

Una vez importado este modulo vamos a poder hashear la contraseña con el metodo asincronico "hash()" que recibira como parametros la contraseña y la cantidad de rondas de hasheo que va a recibir esa contraseña, 12 se considera un numero muy seguro. Este tipo de encriptacion NO se puede desencriptar, por eso no se encriptan todos los valores.

Ejemplo de creacion de usuario y hasheo de contraseña:  
Se envia desde un form una POST request con los datos. Luego hacemos el login y ahi asignamos la cookie y la sesion.
const email = req.body.email;
const password = req.body.password;
User.findOne({email : email})
.then(userDoc => {
    if(userDoc) {
        return res.status(409).redirect("/signup");
    } else {
        return bcrypt.hash(password, 12)
        .then(hashedPassword => {
            const user = new User({email : email, password : hashedPassword})
            return user.save();
        })
        .then(result => {
            res.redirect("/login");
        });
    }
})
.catch(err => console.log(err))

5. Validar credenciales
Para validar una contraseña ingresada con un hasheada dentro de la base de datos vamos a utilizar el paquete que utilizamos para la encriptacion. Este paquete tiene ciertos algoritmos que realizan el hasheo y tiene metodos para comparar el hasheo que este realizo con contraseñas no hasheadas. Este metodo devuelve una promesa y si el resultado de la comparacion es positivo o negativo este siempre va a ir al .then(). 

Ejemplo de login a traves de un form POST y validacion de credenciales: 
const email = req.body.email;
const password = req.body.password;
User.findOne({email : email})
.then(user => {
    if(!user){
        return res.status(401).redirect("/login");
    }
    bcrypt.compare(password, user.password).
    then(doMatch => {
        if(doMatch){
            req.session.user = user;
            req.session.isLoggedIn = true;
            return req.session.save(err => {
                //console.log(err);
                res.redirect("/");
            })
        } else {
            res.redirect("/login")
        }
    })
    .catch(err => {
        console.log(err)
        res.redirect("/login")
    })
})
.catch(err => console.log(err));

6. Trabajando con la proteccion rutas 
El acercamiento que tuvimos hasta ahora era validar y esconder de las vistas ciertos links en las vistas generadas para que el cliente no pueda clickear e ingresar. Sin embargo, esto no es util y es muy peligroso si el cliente conoce alguna ruta de administrador/usuario y realiza interacciones que no deberia.

Para proteger las rutas vamos a querer chequear que un usuario esta autenticado antes de renderizar una vista. Podriamos realizar lo siguiente:
(req, res, next) => {
    if(!req.session.isLoggedIn) {
        return res.render("/login");
    }
    res.render("./admin/edit-product",{
        pageTitle : "Add Product", path : "/admin/add-product", editing : false, isAuthenticated: req.session.isLoggedIn
    });
}
Este es un codigo que podriamos tener para todos los controladores de nuestra ruta, pero estariamos repitiendo codigo y a la larga nos podria generar problemas a la hora de mantener o realizar cambios. En vez de este tipo de validaciones vamos a utilizar un middleware para la proteccion de rutas.

Este middleware iria en una carpeta llamada "middleware". Luego lo podriamos importar en las rutas y colocarlo como otro controlador de las rutas. Las rutas admiten mas de un controlador y se ejecutan de izquierda a derecha.

Ejemplo de middleware para proteger rutas:
module.exports = (req, res, next) => {
    if(!req.session.isLoggedIn) {
        return res.render("/login");
    }
    next();
}

Ejemplo de importacion y uso del middlware en una ruta:
const isAuth = require("../middleware/is-auth");
router.get("/add-product", isAuth, adminController.getAddProduct);
Como dije anteriormente, puedo agregar cuantos manejadores quiera y se ejecutan de izquierda a derecha.

7. Entendiendo los ataques CSRF
https://www.thesslstore.com/blog/the-ultimate-guide-to-session-hijacking-aka-cookie-hijacking/
Cross-Site Request Forgery. Este un tipo de patron de ataque especial donde las personas pueden abusar de las sesiones y engañar a usuarios de nuestra aplicacion a ejecutar codigo malicioso.
Un ejemplo es una fake-page que se ve como la nuestra pero que no es la nuestra, y se envia una peticion desde esa pagina a nuestro servidor. Esa peticion puede ser la transferencia de dinero, gasto de dinero de la tarjeta de un usuario, etc.

8. Usando un CSRF token
https://www.npmjs.com/package/csurf
El paquete para añadir prevencion a los ataques CSRF es "csurf", este es un paquete de Node-Express que nos permite generar un CSRF token. Un token que podemos embeber en nuestras views/formularios para cada peticion que cambia el estado de nuestro usuario, que cambie informacion sensible y que queramos proteger. 
En caso de un ataque CRSF a la fake-page le faltaria este token, que no podrian adivinar porque es un string random hasheado y solo el backend puede saber si es valido o no. Tampoco pueden robarlo, porque un nuevo token es generado por cada pagina que renderizamos.

Para utilizarlo debemos importar el modulo en nuestro app.js, asignarlo a una variable y dentro puedo configurarlo pasandole un objeto JavaScript. Luego, despues del middleware que inicializa sesiones, vamos a generar un middleware con esa constante a la cual le asiganmos el paquete de csurf.

Ejemplo:
const csrf = require("csurf");
const csrfProtecction = csrf();
app.use(session({secret : 'my secret', resave : false, saveUninitialized : false, store : store})); -> Middleware de sesiones
app.use(csrfProtecction);

Luego tenemos que configurarlo en nuestras vistas, ya que por cada peticion POST se pide este token. Por lo tanto, en los formularios (donde tenemos un request body) vamos a agregar un campo hidden, con el name "_csrf" y le vamos a pasar a la vista cuando hagamos el render un atributo que va a contener el valor del metodo csrfToken() dentro de la peticion. Esta dentro de la peticion ya que lo genera el middleware que agregamos anteriormente.

Ejemplo:
Dentro del controlador que genera la vista -> Mirar la siguiente leccion para algo mas practico
res.render("./shop/index", {prods : products, pageTitle : "Shop", path : "/", isAuthenticated: req.session.isLoggedIn, csrfToken : req.csrfToken()});
En la vista, un formulario POST tiene:
<form action="/logout" method="post">
    <input type="hidden" name="_csrf" value="<%=csrfToken%>">
    <button type="submit">Logout</button>
</form>
Por cada formulario POST, PUT, DELETE, etc vamos a tener que generar este campo hidden.

Como dijimos anteriormente "Un token que podemos embeber en nuestras views/formularios para cada peticion que cambia el estado de nuestro usuario, que cambie informacion sensible y que queramos proteger.". De esta manera, generando el token en todas las peticiones a traves del middleware (y luego de generar del middleware de sesiones, ya que se compara con el token generado en la sesion) cada vez que hagamos una peticion que altere un estado (POST, PUT, DELETE, etc) vamos a utilizar este token para que sean validas.

9. Añadiendo atributos a todas las rutas
Como vimos anteriormente con la autenticacion y proteccion de rutas, escribir y generar este token en cada campo y vista que tengamos puede ser muy cargoso, dificil de mantener a la larga y estariamos repitiendo codigo por cada vista que genere este tipo de peticiones. 
Para evitar este problema podemos decirle a expressJs (non solo con CSRF, con cualquier otro atributo) que tenemos informacion que debe ser incluida en cada ruta que renderice una view. Vamos a generar un middlware antes de las rutas y en este vamos a acceder al atributo respuesta, a la variable locals y luego agregar los atributos clave valor.

Ejemplo:
app.use((req, res, next) => {
    res.locals.isAuthenticated = req.session.isLoggedIn;
    res.locals.csrfToken = req.csrfToken();
    next();
})


10. Generar variables temporales en las sesiones.
¿Como podemos generar variables que guardan su estado a traves de las peticiones y que una vez utilizadas se eliminen?. Bueno, obviamente vamos a utilizar sesiones para guardar entre las peticiones estados y vamos a utilizar el paquete "connect-flash" para generar un metodo que se guarda en la session.
Este metodo es accedido con una ("key", "value") para generar un valor y ("key") para extraerlo. Una vez extraido ese valor se borra y no se vuelve a utilizar. Los valores se guardan en un array, por lo que puedo guardar mas de un valor cuando declaro una key.
Esto puede ser util para generar mensaje de errores en caso de redireccionar a un usuario entre distintas rutas.

Ejemplo de importacion y utilizacion:
const flash = require("connect-flash");
app.use(flash()); -> Luego de las sesiones

En un controlador
req.flash("error", "Invalid email or passwords."); -> Se guarda en el index 0.
errorMessage: req.flash("error")[0] -> Se utiliza y se elimina.

Mas de un valor en una key:
req.flash('info', ['Welcome', 'Please Enjoy']);

11. Resumen del modulo

Authentication
Autenticacion significa que no todos los vistantes de la pagina pueden ver e interactuar con todo.
La autenticacion ocurre en el lado del servidor y se construye a partir de las sesiones.
Podemos proteger nuestras rutas chequeando en un middleware si el controlador de la sesion tiene ciertas caracteristicas antes de realizar una accion. 

Security & UX
Las contraseñas deben ser guardadas en un formato hasheado.
Ataques CSRF son problemas reales y, por lo tanto, deberiamos siempre incluir algun tipo de proteccion en cualquier aplicacion que hagamos.
Para una mejor experiencia de usuario, podriamos flashear data/mensajes en las sesiones para poder desplegarla en las views. mensajes "flash" son aquellos que utilizamos con connect-flash para guardarlos temporalmente en la sesion y una vez utilizados eliminarlos.