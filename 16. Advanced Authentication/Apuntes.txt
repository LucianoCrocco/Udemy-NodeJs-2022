16. Advanced Authentication

Vamos a mejorar el sistema de autenticacion y seguridad.

¿Que hay en este modulo?
Reseteo de contraseñas
Autorizacion -> Solo los usuarios que crearon un post pueden editar el propio




1. Creacion de un Token para resetear contraseñas
Para hacer el reset de una contraseña debemos ser capaces de enviar un email con un token para cambiar la contraseña. Este token debe ser unico, tener una fecha de expiracion y debemos guardarlo en nuestra base de datos. 
NodeJs tiene una libreria criptografica, por lo que vamos a utilizarla para generar el token. La libreria se llama "crypto". Esta libreria nos ayuda a crear valores unicos, seguros y random.
El token deberia guardarse en el modelo al cual afecta junto con otro campo que sea el tiempo de expiracion.
crypto tiene el metodo randomBytes qeu genera X cantidad de byts y recibe una funcion callback con un error y un buffer, si fallo algo tratamos el error sino pasamos a string el valor del buffer advirtiendo a la funcion .toString("HEX") que el valor es hexadecimal por parametros.

Ejemplo de generar un token:

Agrego los campos en el modelo usuario
resetToken : String,
resetTokenExpiration : Date,

En el controlador importo el modulo crypto y lo utilizo para generar el token.
const crypto = require("crypto");
exports.postReset = (req, res, next) =>{
    crypto.randomBytes(32, (err, buffer) => {
        if(err){
            console.log(err);
            return res.redirect("/reset")
        }
        const token = buffer.toString('hex');
        User.findOne({email : req.body.email})
        .then(user => {
            if(!user){
                req.flash("error", "No account with that Email found");
                return res.redirect("/reset");
            }
            user.resetToken = token;
            user.resetTokenExpiration = Date.now() + 3600000;
            user.save()
            .then(result => {
                res.redirect("/");
                return sendGrid.send({
                    to : req.body.email,
                    from : process.env.SENDGRID_EMAIL,
                    subject : 'Password reset',
                    html: `
                    <p>You requested a password reset</p>
                    <p>Click this <a href="http://localhost:3000/reset/${token}">Link</a> to set a new password</p>`
                })
            })
            .catch(err => console.log(err));
        })
        .catch(err => console.log(err))
    })
};

2. Añadiendo autorizacion
Necesitamos añadir una capa de autorizacion para que el usuario, por ejemplo, pueda editar solo publicaciones que haya hecho el y no la de los demas.
La autorizacion quiere decir que restrinjo los permisos de un usuario conectado.
Una manera de limitar la informacion que se le muestra al usuario es filtrarla a la hora de traerla.
Para las peticiones POST tambien debemos generar una capa de autorizacion ya que alguien cambiar la informacion si conoce el funcionamiento de la edicion, borrado, etc.

Ejemplo trayendo todos los productos publicados por un usuario por GET:
exports.getProducts = (req, res) => {
    Product.find({userId : req.user._id})
    .then(products => {
        console.log(products)
        res.render("./admin/products", {
            prods : products, pageTitle : "Admin Products", path : "/admin/products"
        });
    })
    .catch(err => console.log(err));
}

Ejemplo intentando borrar por POST;
exports.postDeleteProduct = (req, res) => {
    const prodId = req.body.productId;
    Product.deleteOne({_id : prodId, userId : req.user._id}) -> Chequeo si el usuario del producto es el mismo que lo creo.
    .then(result => {
        console.log("Destroy product")
        res.redirect("/admin/products")
    })
    .catch(err => console.log(err))
}

3. Resumen del modulo

Password Resetting
Tiene que implementarse de manera que prevengamos que otros hagan un reset a un usuario random.
Los tokens deben ser random, inadivinables, unicos y con fecha de vencimiento.

Authorization
La autorizacion es una parte importante de practicamente todas las apps.
No todos los usuarios autenticados puede/debe permitirles hacer de todo.
Vamos a querer cerrarles el acceso restringiendo los permisos a los usuarios.

