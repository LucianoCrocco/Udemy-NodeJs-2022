24. Working with REST APIs - The Practical Application

¿Que hay en este modulo?
Planearemos nuestra API REST
Operaciones CRUD & Endpoints
Validation
Subir Imagenes
Authentication
React 16 para el FrontEnd. Lo provee el instructor.


1. REST API vs Lo visto hasta ahora en el curso
Node + Express App Setup --> Sin cambios.
Routing / Endpoints --> Sin cambios, mas metodos Http.
Handling Requests & Responses --> Parse + Send JSON data, no generamos vistas. Ejemplos visto en la seccion de introduccion
Request Validation --> Sin cambios
Database Communication --> Sin cambios
Files, Uploads, Downloads --> Sin cambios (solo el lado del cliente cambia).
Sessions & Cookies -> No se utilizan Sesiones ni Cookies (La relacion entre ellos. Para JWT vamos a usar Cookies). Cada peticion es tratada de manera separada
Authentication -> Diferente enfoque para la autenticacion.

2. Envio de archivos y JSON
https://www.npmjs.com/package/multer
En el backend vamos a volver a utilizar multer como parser. El parser express.json() solo se utilizará si envio desde el front al back informacion con content-type de tipo "application/json". Los parsers no son auto-excluyentes, simplemente uno es para archivos y texto otro para recibir unicamente JSON.
En el frontend si queremos enviar desde una funcion vamos a crear un objeto FormData al cual le vamos a pasar los datos y una vez enviado va a ser nuestro body. FormData automaticamente setea los headers en esta caso"multipart/form-data".

Ejemplo:
    BACKEND
const fileStorage = multer.diskStorage({
    destination : (req, file, cb) => {
        cb(null, 'images')
    },
    filename: (req, file, cb) => {
        cb(null, uuidv4());
    }
})
const fileFilter = (req, file, cb) => {
    if(file.mimetype === "image/png" || file.mimetype === "image/jpg" || file.mimetype === "image/jpeg"){
        cb(null,true);
    } else {
        cb(null,false);
    }
}

app.use(express.json());
app.use(multer({storage : fileStorage, fileFilter : fileFilter}).single("image"));

FRONTEND
const formData = new FormData();
formData.append("title", postData.title)
formData.append("content", postData.content)
formData.append("image", postData.image)
let url = 'http://localhost:8080/feed/post';

fetch(url, {
    method : method,
    body : formData
})

3. ¿Como funciona la autenticacion en una API REST?