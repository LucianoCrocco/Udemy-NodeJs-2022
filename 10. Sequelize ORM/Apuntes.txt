Understanding Sequelize

Sequelize seguirá utilizando la base de datos MySQL pero el codigo que escribimos va a ser diferente. En vez de codigo SQL utilizaremos un paquete de tercero que permite trabajar con objetos JavaScript y metodos para que este paquete genere el codigo SQL por nosotros. 

Useful resource:
Sequelize Official Docs: http://docs.sequelizejs.com/


1. ¿Que es Sequelize?
Sequelize es un paquete de tecereos y, además, es un O.R.M (Object-Relational Mapping Library). Un ORM trabaja con el codigo SQL en el background y lo mapea en codigo JavaScript con metodos convenientes que podemos llamar para ejecutar ese codigo SQL de detrás de escena. Esto nos permite no tener que trabajar con codigo SQL

Trabaja de la siguiente manera: Tenemos un objeto, supongamos usuario con nombre, edad, email y contraseña. Este objeto lo mapea Sequelize a una BdD, por lo que automaticamente crea la tabla, setea relaciones, etc. A Sequelize le pasamos codigo JavaScript para que este despues lo escriba en SQL y haga las conexiones con la BdD.

Conceptos importantes
Modelos -> Define que data hace un modelo y, por lo tanto, los datos que se guardan.
Instanciacion -> Permite instanciar estos modelos.
Consultas -> Permite ejecutar consultas de nuestros modelos.
Asociar Modelos -> Podemos asociar dos modelos.

El paquete para instalarlo es "Sequelize" y depende del paquete "mysql2".

2. Configurar la conexion con la Base de Datos
https://sequelize.org/
El primer paso para utilizar Sequelize es crear un modelo y conectarlo a una BdD.
Para utilizar Sequelize importamos el paquete instalado que va a funcionar como constructor para una variable. Una vez importado utilizamos el constructor y le pasamos como argumentos los datos de la base a la que se tiene que conectar. Luego la exportamos para que se pueda utilizar como hicimos con una base normal.
Ejemplo:
const Sequelize = require("sequelize");
const { Sequelize } = require("sequelize"); -> Para el intellisense
const sequelize = new Sequelize("NOMBRE BdD", "USUARIO", "CONTRASEÑA", {OPCIONES});
module.exports = sequelize;

3. Definir un modelo
https://sequelize.org/docs/v6/core-concepts/model-basics/#:~:text=Models%20are%20the%20essence%20of,(and%20their%20data%20types).
Para definir un modelo tenemos que importar esa base que definimos con Sequelize y nuevamente el paquete que decargamos con npm. No vamos a generar una class, sino que el Sequelize que definimos nuestra conexion a la BdD tiene un metodo .define() que vamos a guardar en una variable donde se define las caracteristicas del objeto y con el modulo importado los tipos de datos que debe almacenar.
Ejemplo:
const Sequelize = require("sequelize");
const sequelize = require("../helpers/database");

const Product = sequelize.define("product", { -> Sequelize luego pluraliza el nombre
    id : {
        type : Sequelize.INTEGER,
        autoIncrement : true,
        allowNull : false,
        primaryKey : true
    },
    title : Sequelize.STRING,
    price : {
        type : Sequelize.DOUBLE,
        allowNull : false
    },
    imageUrl : {
        type: Sequelize.STRING,
        allowNull : false
    },
    description : {
        type: Sequelize.STRING,
        allowNull : false
    }
})

module.exports = Product;

Luego exportaremos este modelo del ORM para poder utilizarlo.

4. Sincronizando definciones JavaScript a la Base de Datos.
Como dijimos anteriormente, puedo indicarle a Sequelize que cree una tabla con los atributos definidos en el modelo.
Puedo decirle a Sequelize que cuando inicie la app cree una tabla de cada modelo definido, y en caso de que ya exista no la sobreescriba (Aunque podemos decirle que lo haga).
Para ello en el punto de entrada de la aplicacion vamos a generarle estas instrucciones importando el objeto que exportamos en nuestro archivo de base de datos.

El Sequelize instanciado en un objeto tiene un metodo llamado sync(), que va a buscar todas los modelos que definimos cuando hicimos un .define() y crea la tabla y las relaciones (si especificamos) para ellos. sync() nos devuelve una promesa que podemos tratar con el .then() si todo salio correcto y si hubo un error con el .catch().

Ejemplo:
const sequelize = require("./helpers/database"); -> Importamos el objeto que definimos con la construccion Sequelize().
sequelize.sync() -> Sincronizamos todos los modelos definidos cuando realizamos un .define() y exponemos los resultados de la promesa.
.then(result => {
    console.log(result)
    app.listen(3000);
})
.catch(err => console.log(err)); 


Sequelize agrega dos campos (como la mayoria de ORM's) llamados createdAt y updatedAt. Con estos campos maneja automaticamente timestamps de ingreso de la tabla.

5. Insertar data & crear un producto
Existen 2 metodos para insertar en una base de datos. Uno es create() al cual le pasamos un objeto con los valores que van en el campo de la BdD y automaticamente crea basado en el modelo que definimos y lo guarda. Otro es build el cual genera un objeto basado en el modelo pero no lo guarda, lo genera ese objeto en JavaScript y despues nostros manualmente tenemos que guardarlo.
Ejemplo: 
Product.create({ -> Product es el modelo que exportamos cuando realizamos el .define();
    title : req.body.title,
    price : req.body.price,
    imageUrl : req.body.imageUrl,
    description : req.body.description
})
.then(result => console.log(result))
.catch(err => console.log(err))

Al igual que creando la conexion, sequelize trabaja con promesas. Por lo que podemos hacer un .then y un .catch

6. Traer data y encontrar productos
Para traer todos los usuarios Sequelize tiene el metodo findAll(), puedo configurarlo pasandole por parametros un objeto JavaScript. 
findByPk(VALOR) -> Busca la coincidencia con la PK y lo trae, en nuestro caso y en casi todos va a ser un ID la PK. 

Ejemplo traer todo sin condiciones:
Product.findAll() -> Product es el modelo que exportamos cuando realizamos el .define();
.then(products => {
    res.render("./shop/index", {prods : products, pageTitle : "Shop", path : "/"});
})
.catch(err => console.log(err));

Ejemplo traer con condicion:
const prodId = req.params.productId;
Product.findAll({ -> Nos devuelve un array
    where:{
        id : prodId
    }
})
.then(products => {
    res.render("./shop/product-detail", {product : products[0], pageTitle : products[0].title, path : "/products"});
})
.catch(err => console.log(err));

Ejemplo Primary Key:
const prodId = req.params.productId;
Product.findByPk(prodId)
.then(product=> res.render("./shop/product-detail", {product : product, pageTitle : product.title, path : "/products"})) 
.catch(err => console.log(err));

7. Actualizar productos
Podemos traer el objeto y asignarle por cada variable el valor nuevo y luego hacer un .save(). El save() detecta si debe crear una fila nueva o si necesita actualizar/sobre-escribir una ya existente.

Ejemplo:
Product.findByPk(prodId)
.then(product => {
    if(!product){
        return res.redirect("/");
    }
    product.title = updatedTitle; -> Utilizo los metodos product del ORM
    product.imageUrl = updatedImageUrl;
    product.description = updatedDescription;
    product.price = updatedPrice;
    return product.save() -> Al estar dentro de otra promesa, puedo devolverla y que la maneje el .then siguiente.
})
.then(result => {
    console.log("Product updated"); 
    res.redirect("/admin/products");
})
.catch(err => console.log(err));

8. Eliminar productos
El metodo .destroy() del modelo ORM que exportamos permite eliminar datos de la base de datos. Por parametros le pasamos un objeto JavaScript donde le indicamos las condiciones que tienen que tener los productos para ser eliminados.
Otra manera es buscar el producto y luego cuando el ORM lo trae hacerle el .destroy() a ese objeto que nos trajo.

Ejemplo sin buscar:
const prodId = req.body.productId;
Product.destroy({
    where : {
        id : prodId
    }
})
.then(res.redirect("/admin/products"))
.catch(err => console.log(err))

Ejemplo buscando: 
const prodId = req.body.productId;
Product.findByPk(prodId)
.then(product => {
    console.log(product);
    return product.destroy();
})
.then(result => {
    console.log("Destroy product");
    res.redirect("/admin/products");
})
.catch(err => console.log(err))

9. Relacion One-To-Many
Existen las relaciones One-To-Many, Many-To-Many y Many-To-One. Por ejemplo puedo tener un usuario con muchos productos, un carrito con un usuario y muchos productos, etc.
Para relacionar modelos tenemos que importarlos en el archivo donde iniciamos el servidor (que se inicia, x ejemplo, en el .index.js, app.js, el archivo principal). Una vez importados, y antes de hacer el sync() con la base de datos, elgimos uno de estos modelos y podemos con el ORM hacer el metodo MODELO.belongsTo(MODELO, OPCIONES) para relacionarlo. Las opciones permiten dar comportamiento, por ejemplo, eliminar todo si un modelo no esta mas.
Para establecer una relacion uno a muchos tengo el metodo MODELO.hasMany(MODELO);
Sequelize añade metodos especialices dependiendo de la relacion que hayamos establecido.

Para forzar la sobreescritura de tablas podemos pasarme un objeto con opciones el sync({force : true});

Ejemplo:
const User = require("./models/user");
const Product = require("./models/product");
Product.belongsTo(User, {
    constraints : true,
    onDelete : "CASCADE"
});
User.hasMany(Product);

10. Relacion Many-To-Many
Una relacion Many-To-Many necesita una tabla intermediaria que los relacione.
Tenemos que indicar, una vez importado los modelos, a ambos modelos que comporten esta relacion con el motodo  belongsToMany() para ambos y como parametro pasarle un objeto JS con la opcion through : MODELO_CONEXION indicando el modelo que utilizamos para relacionar ambas.
Ejemplo:
Cart.belongsToMany(Product, {through : CartItem});
Product.belongsToMany(Cart, {through : CartItem});

Esto tambien va a generar metodos magicos para acceder a las tablas de la tabla intermedia, por lo tanto podemos trabajar con los tres modelos sin tener que importar el modelo intermedio.
Con la relacion del ejemplo podriamos traer todos los productos con Cart.getProducts() nos hace los JOINS de las tablas y la tabla intermediaria.

Tambien puedo actualizar un objeto si existe, y si no lo crea.
Ejemplo:
fetchedCart.addProduct(product, {
    through: { quantity: newQuantity }
});

11. Datos asociados
Puedo acceder a los metodos asociados que nos provee Sequelize para las relaciones que tengamos, pero cuando pidamos un objeto que tiene una relacion, ese objeto relacionado no nos lo va a traer. Para ello tenemos que utilizar estos metodos asociados. Tambien puedo crear, eliminar, etc.
Importante leer la documentacion y los ejemplos del curso, en nuestro caso vamos a utilizar MongoDb para el proyecto.

Puedo pedir, si tengo una tabla asociada a la otra, que se incluya esa tabla relacionada. Para ello cuando hacemos un getX podemos pasar un objeto con opciones donde establecemos un include como key y como value un array con las tablas relacionadas.
Ejemplo:
req.user.getOrders({ include : ['products']})

12. Resumen del modulo

SQL
SQL usa un esquema de datos estricto y relaciones
Podemos conectar SQL con nuestra NodeJs app a traves del paquete mysql2
Las queries SQL no estan directamente relacionadas con NodeJs, requieren otro curso aparte para aprender.

Sequelize
En vez de escribir consultas SQL manualmente, podemos usar paquetes (ORMs) como Sequelize para enfocarnos en codigo de NodeJs y trabajar con objetos nativos de JavaScript.
Sequelize nos permite definir modelos e interactuar con la base de datos a traves de ellos.
Permite establecer facilmente relaciones (Asociaciones) e interactuar con los modelos relacinados entre ellos.
